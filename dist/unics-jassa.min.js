var unicsjassa=angular.module("UnicsJassa",[]).provider("configuration",function(){var configurationData;this.initialize=function(data){configurationData=data},this.$get=function(){return configurationData}});$.get("/config/unics-config.json",function(response){unicsjassa.config(function(configurationProvider,$routeProvider,$locationProvider){configurationProvider.initialize(response)}).run(function(){window.jassa=new Jassa(Promise,$.ajax),window.sparql=jassa.sparql,window.rdf=jassa.rdf})}),angular.module("UnicsJassa").service("AggregateFunctions",function(){var sparql=jassa.sparql,aggregateFunctions=_.map([sparql.AggAvg,sparql.AggCount,sparql.AggMax,sparql.AggMin,sparql.AggSum],function(aggClass){return(new aggClass).name});return _.zipObject(_.map(aggregateFunctions,function(aggFunc){return aggFunc.toUpperCase()}),aggregateFunctions)}),angular.module("UnicsJassa").factory("Prefixes",function($http,configuration){var prefixes=new rdf.PrefixMappingImpl(configuration.prefixes);return{getPrefixOntop:function(){return"ontop"},getPrefixRdf:function(){return"rdf"},getPrefixDcterms:function(){return"dcterms"},getPrefixRis3cat:function(){return"ris3cat"},prefixMapping:prefixes,getUriPrefix:function(prefix){return prefixes.getNsPrefixURI(prefix)}}}),angular.module("UnicsJassa").service("SparqlFacade",function(Prefixes,unics,AggregateFunctions){Prefixes.prefixMapping;return{typeOf:typeOf,triple:triple,instanceOf:function(subject,predicate,object){return new rdf.Triple(unics.asVar(subject),predicate,object)},predicateObjectList:predicateObjectList,constraint:function(subject,predicate,literalValue){return new rdf.Triple(subject,predicate,new rdf.NodeFactory.createPlainLiteral(literalValue,null))},generateAggregators:generateAggregators,exploreObjectType:exploreObjectType,setAsOptional:function(elementTriplesBlock){return new sparql.ElementOptional(elementTriplesBlock)},setFilter:function(node_uri,literalValues,expressionName,logicalOperator){var equalsExpressions=_([].concat(literalValues)).map(function(literalValue){return new sparql[expressionName](new sparql.ExprVar(unics.asVar(node_uri)),_.isInteger(literalValue)?sparql.NodeValueUtils.makeInteger(literalValue):sparql.NodeValueUtils.makeString(literalValue))}).value();return new sparql.ElementFilter(1==equalsExpressions.length?_.first(equalsExpressions):"OR"==logicalOperator?sparql.ExprUtils.orify(equalsExpressions):sparql.ExprUtils.andify(equalsExpressions))},setFilterByNodeUri:function(node_uri,node_uris,expressionName,logicalOperator){var equalsExpressions=_([].concat(node_uris)).map(function(n){return new sparql[expressionName](new sparql.ExprVar(unics.asVar(node_uri)),n)}).value();return new sparql.ElementFilter(1==equalsExpressions.length?_.first(equalsExpressions):"OR"==logicalOperator?sparql.ExprUtils.orify(equalsExpressions):sparql.ExprUtils.andify(equalsExpressions))},getReferencedVarsInFilters:function(elementFiltersArr){var varExprList=new sparql.VarExprList;return varExprList.addAll(_(elementFiltersArr).map(function(e){return e.getVarsMentioned()}).flatten().value()),varExprList},getVarsAndValuesFromFilter:function(elementFilter){var expressionsNotLogical=[],isLogical=function(expr){return expr instanceof sparql.E_LogicalAnd||expr instanceof sparql.E_LogicalOr};jassa.util.TreeUtils.visitDepthFirst(elementFilter.expr,function(element){return _.filter([element.left,element.right],function(expr){return isLogical(expr)})},function(element){var hasLogicals=!1,notLogicals=[];isLogical(element)?(notLogicals=_.filter([element.left,element.right],function(expr){return!isLogical(expr)}),hasLogicals=!(2==notLogicals.length)):notLogicals.push(element);return expressionsNotLogical=expressionsNotLogical.concat(notLogicals),hasLogicals});var result={};return expressionsNotLogical.forEach(function(expr){null==result[expr.getLeft().asVar().name]&&(result[expr.getLeft().asVar().name]=[]),result[expr.getLeft().asVar().name].push({value:expr.getRight().node.getLiteral().val,op:expr.name})}),result},negateFilter:function(elementFilter){return new sparql.ElementFilter(new sparql.E_LogicalNot(elementFilter.expr))},constraintBoolean:function(subject,predicate,literalValue){return new rdf.Triple(subject,predicate,sparql.NodeValueUtils.createLiteral(literalValue,jassa.vocab.xsd.xboolean.getUri()))},findElementFiltersByVars:function(elementFilters,vars){return _.find(elementFilters,function(e){var varExprList=new sparql.VarExprList;return varExprList.addAll(e.getVarsMentioned()),_.some(vars,function(v){return varExprList.contains(v)})})},queryExtendedNamesForType:function(type,propertyLabel){var varExprList=new sparql.VarExprList;return varExprList.add(unics.asVar(propertyLabel)),{varExprList:varExprList,queryPattern:exploreObjectType(type,type,[{p:unics.extendedName,o:propertyLabel}])}}};function typeOf(subject,object){return new rdf.Triple(unics.asVar(subject),jassa.vocab.rdf.type,object)}function triple(subject,predicate,object){return new rdf.Triple(unics.asVar(subject),predicate,unics.asVar(object))}function predicateObjectList(subject,predicates){return new sparql.ElementTriplesBlock(_(predicates).map(function(predicate){return predicate instanceof Object&&predicate.constructor===Object?triple(subject,predicate.p,predicate.o):triple(subject,predicate,predicate)}).value())}function exploreObjectType(subject,type,predicates){var tp=new sparql.ElementTriplesBlock;return tp.addTriples(typeOf(subject,type)),tp.addTriples(predicateObjectList(subject,predicates).getTriples()),tp}}),angular.module("UnicsJassa").service("unics",["Prefixes","configuration",function(Prefixes,configuration){var service={asVar:asVar,asVars:function(node_uris){return _(node_uris).map(function(node_uri){return asVar(node_uri)}).value()},asString:function(node_uri){return rdf.NodeUtils.toPrettyString(node_uri)}};function asVar(node_uri){return rdf.NodeFactory.createVar(rdf.NodeUtils.toPrettyString(node_uri))}return _.forOwn(configuration.taxonomies,function(taxonomy,uri){service=_.merge(service,function(taxonomy,uri){return _.zipObject(_.map(taxonomy,function(key){return _.replace(key,new RegExp("-","g"),"_")}),_.map(taxonomy,function(key){return rdf.NodeFactory.createUri(uri+key.toString())}))}(taxonomy,Prefixes.getUriPrefix(uri)))}),service}]);